// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  auth0Id       String?  @unique
  provider      String?
  nombre        String
  email         String   @unique
  password      String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)

  // Relaciones existentes
  checks Check[]

  // NUEVAS RELACIONES
  profile       Profile?
  subscriptions Subscription[]
  payments      Payment[]

  @@map("users")
}

model Check {
  id                 String    @id @default(uuid())
  userId             String
  url                String
  name               String?
  interval           String    @default("5min")
  regions            String[]  @default([])
  timeout            Int       @default(30)
  expectedStatusCode Int       @default(200)
  status             String    @default("active")
  lastCheckAt        DateTime?
  lastStatus         String?
  failureCount       Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkResults CheckResult[]
  alerts       Alert[]

  @@index([userId])
  @@map("checks")
}

model CheckResult {
  id           String   @id @default(uuid())
  checkId      String
  region       String
  statusCode   Int
  latencyMs    Int
  success      Boolean
  errorMessage String?
  timestamp    DateTime @default(now())

  check  Check   @relation(fields: [checkId], references: [id], onDelete: Cascade)
  alerts Alert[]

  @@index([checkId, timestamp])
  @@map("check_results")
}

model Alert {
  id            String   @id @default(uuid())
  checkId       String
  checkResultId String
  alertType     String
  sentAt        DateTime @default(now())
  success       Boolean
  errorMessage  String?

  check       Check       @relation(fields: [checkId], references: [id], onDelete: Cascade)
  checkResult CheckResult @relation(fields: [checkResultId], references: [id], onDelete: Cascade)

  @@index([checkId, sentAt])
  @@map("alerts")
}

// ============================================
// NUEVOS MODELOS - SISTEMA DE PLANES
// ============================================

model Profile {
  id     String @id @default(uuid())
  userId String @unique

  // Plan actual del usuario
  planType String @default("free") // "free", "starter", "pro"

  // Límites del plan actual
  maxChecks          Int @default(5) // free: 5, starter: 15, pro: 25
  minIntervalMinutes Int @default(30) // free: 30min, starter: 5min, pro: 1min
  maxRegions         Int @default(1) // Para futuro: 1, 3, 6
  dataRetentionDays  Int @default(7) // free: 7, starter: 30, pro: 90
  alertCooldownMin   Int @default(30) // free: 30min, starter: 15min, pro: 0 (inmediato)

  //telegram alert
  telegramChatId String?

  // Uso actual (para tracking)
  currentChecks Int @default(0) // Cuántos checks tiene creados actualmente

  // Fechas del plan
  planStartedAt DateTime? // Cuándo empezó el plan actual
  planExpiresAt DateTime? // Cuándo expira (null = no expira, ej: free)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Subscription {
  id     String @id @default(uuid())
  userId String

  // Información del plan
  planType String // "starter", "pro"
  status   String @default("active") // "active", "cancelled", "expired", "paused"

  // Información de Mercado Pago
  mpSubscriptionId String? @unique // ID de suscripción en MP (si usamos suscripciones)
  mpPreapprovalId  String? @unique // ID de preapproval en MP

  // Información de facturación
  amount       Float // Monto en USD (5 o 15)
  currency     String @default("USD")
  billingCycle String @default("monthly") // "monthly", "yearly"

  // Fechas importantes
  startDate       DateTime // Fecha de inicio de la suscripción
  endDate         DateTime? // Fecha de fin (si fue cancelada)
  nextBillingDate DateTime? // Próxima fecha de cobro
  cancelledAt     DateTime? // Cuándo se canceló (si aplica)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@map("subscriptions")
}

model Payment {
  id     String @id @default(uuid())
  userId String

  // Información del pago
  amount        Float // Monto pagado
  currency      String  @default("USD")
  status        String // "pending", "approved", "rejected", "cancelled", "refunded"
  paymentMethod String? // "credit_card", "debit_card", "mercado_pago", etc

  // Relación con plan
  planType String // "starter", "pro" - para qué plan fue el pago

  // Información de Mercado Pago
  mpPaymentId    String? @unique // ID del pago en MP
  mpPreferenceId String? // ID de preferencia en MP
  mpStatus       String? // Estado específico de MP
  mpStatusDetail String? // Detalle del estado de MP

  // Metadata adicional (flexible)
  metadata Json? // Para guardar info extra de MP como: payer info, etc

  // Descripción
  description String? // "Plan Starter - Mensual", etc

  // Timestamps
  paidAt    DateTime? // Cuándo se completó el pago
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relación
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([mpPaymentId])
  @@map("payments")
}
